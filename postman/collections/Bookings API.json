{
  "info": {
    "_postman_id": "8e2ed9fb-996f-49cf-9de7-1a7430c875f5",
    "name": "bookings-api-requests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "44762698",
    "_collection_link": "https://nesli-4153839.postman.co/workspace/bookings-api~b58e3dd0-b346-47ca-9003-e1931f7dbb99/collection/44762698-8e2ed9fb-996f-49cf-9de7-1a7430c875f5?action=share&source=collection_link&creator=44762698"
  },
  "item": [
    {
      "name": "users",
      "item": [
        {
          "name": "GET users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for a successful response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "GET user by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Test for response body structure (assuming typical user properties)\r",
                  "pm.test(\"Response body contains user properties\", function () {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    pm.expect(responseBody).to.have.all.keys('id', 'username', 'name', 'email', 'phoneNumber', 'pictureUrl');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/a1234567-89ab-cdef-0123-456789abcdef",
              "host": ["{{baseUrl}}"],
              "path": ["users", "a1234567-89ab-cdef-0123-456789abcdef"]
            }
          },
          "response": []
        },
        {
          "name": "GET user by id - invalid id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Test for response body structure (assuming typical user properties)\r",
                  "pm.test(\"Response body contains user properties\", function () {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    pm.expect(responseBody).to.have.all.keys('id', 'username', 'name', 'email', 'phoneNumber', 'pictureUrl');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/44444",
              "host": ["{{baseUrl}}"],
              "path": ["users", "44444"]
            }
          },
          "response": []
        },
        {
          "name": "GET user by email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status is 200 for valid user email\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users?email=johndoe@example.com",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "email",
                  "value": "johndoe@example.com"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GET user by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status is 200 for valid user email\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/users?username=jdoe",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "username",
                  "value": "jdoe"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "CREATE user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful creation of user\r",
                  "pm.test(\"User creation returns 201 status code\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "// Test for response content-type\r",
                  "pm.test(\"Response content-type is JSON\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Test for response body structure\r",
                  "pm.test(\"Response body contains user ID\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"id\");\r",
                  "});\r",
                  "\r",
                  "// Test for response body structure\r",
                  "pm.test(\"Response body contains username\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"username\", \"nparma\");\r",
                  "});\r",
                  "\r",
                  "// Test for response body structure\r",
                  "pm.test(\"Response body contains email\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"email\", \"nparma@example.com\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"nparma\",\r\n    \"password\": \"12345\",\r\n    \"name\": \"Nesli Parma\",\r\n    \"email\": \"nparma@example.com\",\r\n    \"phoneNumber\": \"123-456-7890\",\r\n    \"pictureUrl\": null\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "CREATE user - missing email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for the response status code\r",
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "// Test for the response time\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "// Test for the presence of an error message in the response body\r",
                  "pm.test(\"Error message is present in the response body\", function () {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    pm.expect(responseBody).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "// Test for the specific error message regarding missing email\r",
                  "pm.test(\"Error message indicates missing email\", function () {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    pm.expect(responseBody.error).to.include(\"Email is required\");\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"baduser\",\r\n    \"password\": \"pass\",\r\n    \"name\": \"No\",\r\n    \"phoneNumber\": \"1111111111\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "CREATE user - existing email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409 Conflict\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body contains error message\", function () {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    pm.expect(responseBody).to.have.property('error');\r",
                  "    pm.expect(responseBody.error).to.be.a('string').that.is.not.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response headers contain Content-Type application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"newperson\",\r\n    \"password\": \"password123\",\r\n    \"name\": \"New Person\",\r\n    \"email\": \"johndoe@example.com\",\r\n    \"phoneNumber\": \"1234567890\",\r\n    \"pictureUrl\": \"https://example.com/avatar.jpg\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "UPDATE user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 - User updated\", function () {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains updated user\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message).to.include(\"successfully updated\");\r",
                  "  pm.expect(data.user.username).to.eql(\"updated-username\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"newuser2@example.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "UPDATE user - no token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 or 403\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Unauthorized error message\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"token\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"nparmaksiz\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "UPDATE user - invalid id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 or 403\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Proper error message shown\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message).to.include(\"not found\").or.include(\"access\");\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"nparmaksiz\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/9999",
              "host": ["{{baseUrl}}"],
              "path": ["users", "9999"]
            }
          },
          "response": []
        },
        {
          "name": "UPDATE user - invalid body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 422\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Returns validation or failure message\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message).to.exist;\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"invalid\").or.include(\"required\").or.include(\"validation\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204 - User deleted\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response confirms user deletion\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"deleted\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE user - no token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 or 403\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Unauthorized error message\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"token\").or.include(\"unauthorized\").or.include(\"access\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE user - bad token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 or 403\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Invalid token error message\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"token\").or.include(\"unauthorized\").or.include(\"invalid\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer asdjdha647328467283fdsjkfgh",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/e6c6b2a8-9eed-429e-9b9c-1e59fde23094",
              "host": ["{{baseUrl}}"],
              "path": ["users", "e6c6b2a8-9eed-429e-9b9c-1e59fde23094"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE user - invalid id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 or 403\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Proper error message shown\", function () {\r",
                  "  const data = pm.response.json();\r",
                  "  pm.expect(data.message.toLowerCase()).to.include(\"not found\").or.include(\"access\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/6666666",
              "host": ["{{baseUrl}}"],
              "path": ["users", "6666666"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "hosts",
      "item": [
        {
          "name": "GET hosts",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"nparma\",\r\n    \"password\": \"12345\",\r\n    \"name\": \"Nesli Parma\",\r\n    \"email\": \"nparma@example.com\",\r\n    \"phoneNumber\": \"123-456-7891\",\r\n    \"pictureUrl\": null\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/hosts",
              "host": ["{{baseUrl}}"],
              "path": ["hosts"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "bookings",
      "item": [
        {
          "name": "GET bookings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "properties",
      "item": [
        {
          "name": "GET properties",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/properties",
              "host": ["{{baseUrl}}"],
              "path": ["properties"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "reviews",
      "item": [
        {
          "name": "GET reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reviews",
              "host": ["{{baseUrl}}"],
              "path": ["reviews"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "login",
      "item": [
        {
          "name": "POST user login",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"nparma\",\r\n    \"password\": \"12345\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/userlogin",
              "host": ["{{baseUrl}}"],
              "path": ["userlogin"]
            }
          },
          "response": []
        },
        {
          "name": "POST host login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{hostToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"johnDoe\",\r\n    \"password\": \"johnDoe123\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/hostlogin",
              "host": ["{{baseUrl}}"],
              "path": ["hostlogin"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
